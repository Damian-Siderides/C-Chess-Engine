#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>


void move(int turnNumber);
void printBoard();
void initBoard();
int gameOver();

char board[8][8];
char x = '\0';
int y = 0;
char m = '\0';
int n = 0;

int turnNum = 0;
int turn = 0;



int main() {


	// the first step is to initialise the board

	initBoard();


	// the n we print the board

	


	//and now we are entering an infinite loop until the game is won.

	printf("White is lowercase\n");
	printf("Black is uppercase\n");

	while (1) {
		move(turn);
	}
	
//how to define a move

	/*
		Rules

		en passant, stalemate, check, checkmate, castling

		1. Is move out of bounds?  Done 
		2. Is it your piece to move? Done
		3. 

		4. Is move legal for the piece

		3. Are you in check

		5. AI

		6. Gui
	*/

}
void move(int turnNumber) {
	
	printBoard();



	


	if (turn == 0) {
		printf("\nIt is White's turn to move\n(LOWERCASE)\n");
	} else {
		printf("\nIt is Black's turn to move\n(UPPERCASE)\n");
	}


	scanf(" %c", &x);				// here we are scanning in the arguments. In future is there a better way of input output?
	scanf(" %d", &y);
	scanf(" %c", &m);				// one simpler way is to use one number and one letter. We just need a way to convert the letter back into number format very quickly.
	scanf(" %d", &n);

	


	printf("You moved the piece %c from %c%d to %c%d\n", board[y - 1][(int) (x - 'a')],x,y,m,n);	

	

	if (x > 'h' || x < 'a' || y > 8 
	 || y < 1 || m > 'h' || m < 'a' 
			  || n > 8 || n < 1) {

		printf("Coordinates out of bounds\n");								// we need to check that the inputs are within the bounds
	} else if (!islower(board[y - 1][(int) (x - 'a')]) == turn || isupper(board[y - 1][(int) (x - 'a')]) == turn) {						// and thatt you are moving the right piece

		board[n - 1][(int) (m - 'a')] = board[y - 1][(int) (x - 'a')];
		board[y - 1][(int) (x - 'a')] = ' ';
		//printBoard();
		turnNum++;			// we need to implement checking the legal moves of the pieces


		if (turn == 0) {
			turn = 1;
		} else if (turn == 1) {
			turn = 0;
		}






		} else {
		

		printf("Yo you tried to move the wrong piece\n");
		
	}

		//printf("turn is %d\n", turn);

		//printf("!isLower is %d\n", !islower(board[y - 1][(int) (x - 1)]));
		//printf("!isUpper is %d\n", !isupper(board[y - 1][(int) (x - 1)]));
		
//
		//printf("isLower is %d\n", islower(board[y - 1][(int) (x - 1)]));
		//printf("isUpper is %d\n", isupper(board[y - 1][(int) (x - 1)]));

	
		//printf("the piece is %c\n", board[y - 1][(x - 'a')]);
}

void initBoard() {
	for (int i = 0; i < 8; i++) {
		board[1][i] = 'P';
		board[6][i] = 'p';
	}
	for (int i = 2; i < 6; i++) {
		for (int j = 0; j < 8; j++) {
			board[i][j] = ' ';
		}
	}

		board[0][0] = 'R';
		board[0][7] = 'R';

		board[7][0] = 'r';
		board[7][7] = 'r';

		board[0][1] = 'N';
		board[0][6] = 'N';

		board[7][1] = 'n';
		board[7][6] = 'n';

		board[0][2] = 'B';
		board[0][5] = 'B';

		board[7][2] = 'b';
		board[7][5] = 'b';

		board[0][3] = 'Q';
		board[0][4] = 'K';

		board[7][3] = 'q';
		board[7][4] = 'k';
}

void printBoard() {
	printf("\n\n");
	printf("  ");
	for (int i = 0 ; i < 8; i++) {
		printf("_");
		printf(" ");
	}
	printf("\n");
	for (int i = 0; i < 8; i++) {
		printf("%d", i + 1);
		
		for (int j = 0; j < 8; j++) {
			printf("|");
			printf("%c", board[i][j]);

		}
		printf("|");
		printf("\n  ");

		for (int k = 0 ; k < 8; k++) {
		printf("-");
		printf(" ");
	}
	printf("\n");
	}
	printf("  ");
	for (char c = 'A'; c < 'I'; c++) {
		printf("%c", c);
		printf(" ");
	}
	printf("\n\n");	
}

int gameOver() {



}
